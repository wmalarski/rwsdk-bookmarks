// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Bookmark      Bookmark[]
  Tag           Tag[]
  BookmarkTag   BookmarkTag[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Bookmark {
  id          String        @id
  createdAt   DateTime?
  updatedAt   DateTime?
  done        Boolean
  doneAt      DateTime?
  note        String?
  preview     String?
  random      Decimal
  rate        Int?
  text        String?
  title       String
  url         String
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  BookmarkTag BookmarkTag[]

  @@map("bookmark")
}

model Tag {
  id          String        @id
  createdAt   DateTime?
  updatedAt   DateTime?
  name        String
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  BookmarkTag BookmarkTag[]

  @@map("tag")
}

model BookmarkTag {
  id         String    @id
  createdAt  DateTime?
  updatedAt  DateTime?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId      String
  tag        Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  bookmarkId String
  bookmark   Bookmark  @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

  @@map("bookmark_tag")
}
